<Project Sdk="Microsoft.NET.Sdk">

    <PropertyGroup>
        <TargetFramework>netstandard2.1</TargetFramework>
        <AssemblyName>TisRyno.LethalProgression</AssemblyName>
        <Description>Leveling and skillpoints through a managed GUI! Patched and bugfixed until official copy updated.</Description>
        <!-- The plugin will be built in the bin directory -->
        <OutputPath>bin</OutputPath>
        <AppendTargetFrameworkToOutputPath>false</AppendTargetFrameworkToOutputPath>
        <!-- Path of the game directory, should contain Lethal Company.exe -->
        <!-- PROGRA~1 is the short path for Program Files -->
        <!-- PROGRA~2 is the short path for Program Files (x86) -->
        <GameDir>C:\PROGRA~2\Steam\steamapps\common\Lethal Company\</GameDir>
        <!-- Path of the game's plugin directory where the built plugin will be copied to -->
        <PluginGameDir>$(GameDir)BepInEx\plugins\</PluginGameDir>
        <BepInExCoreDir>$(GameDir)BepInEx\core\</BepInExCoreDir>
        <!-- Path of the game's managed directory where the game's dlls are located -->
        <AssemblyGameDir>$(GameDir)Lethal Company_Data\Managed\</AssemblyGameDir>

        <!-- Name of the game executable -->
        <GameExe>Lethal Company.exe</GameExe>
        <!-- Entire path of the game executable -->
        <GameExePath>$(GameDir)$(GameExe)</GameExePath>
        <!-- Version of the game supported by the plugin -->
        <!-- The value must be the same than the one in CI/CD -->
        <!-- https://www.nuget.org/packages/LethalCompany.GameLibs.Steam -->
        <GameVersion>50.0.1-ngd.0</GameVersion>

        <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
        <LangVersion>latest</LangVersion>

        <!-- Number of instances of the game to start to test the plugin -->
        <NumberOfClients>1</NumberOfClients>
        <!-- Delay between each start of the game in seconds -->
        <DelayBetweenClientsInSeconds>5</DelayBetweenClientsInSeconds>
        <!-- To apply the correct delay between each instance, we need to add 1 to the delay because the first "echo" sent by the ping command is instant -->
        <PingDelay>$([MSBuild]::Add($(DelayBetweenClientsInSeconds), 1))</PingDelay>
        <!-- True to start the game when the plugin is built, false to only copy the plugin to the game's plugin directory -->
        <StartGame>false</StartGame>

        <!-- Prefix of the git tag -->
        <!-- The tag must be in the format v1.2.3 -->
        <!-- https://github.com/adamralph/minver#options -->
        <MinVerTagPrefix>v</MinVerTagPrefix>
    </PropertyGroup>

     <ItemGroup>
        <!-- Allows to interact with private fields of classes -->
        <PackageReference Include="BepInEx.AssemblyPublicizer.MSBuild" Version="0.4.1">
            <PrivateAssets>all</PrivateAssets>
            <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
        </PackageReference>

        <!-- Determines the version of the plugin by using git tags -->
        <PackageReference Include="MinVer" Version="4.3.0">
            <PrivateAssets>all</PrivateAssets>
            <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
        </PackageReference>
    </ItemGroup>

    <ItemGroup>
        <PackageReference Include="BepInEx.Analyzers" Version="1.*" PrivateAssets="all" />
        <PackageReference Include="BepInEx.Core" Version="5.*" />
        <PackageReference Include="BepInEx.PluginInfoProps" Version="1.*" />
        <PackageReference Include="Xilophor.LethalNetworkAPI" Version="2.*" PrivateAssets="all"/>
    </ItemGroup>

    <ItemGroup Condition="'$(TargetFramework.TrimEnd(`0123456789`))' == 'net'">
        <PackageReference Include="Microsoft.NETFramework.ReferenceAssemblies" Version="1.0.2" PrivateAssets="all" />
    </ItemGroup>

    <!-- Avoid that the game's assemblies are copied to the plugin's target directory -->
    <Target Name="ClearReferenceCopyLocalPaths" AfterTargets="ResolveAssemblyReferences">
        <ItemGroup>
            <ReferenceCopyLocalPaths Remove="@(ReferenceCopyLocalPaths)"/>
        </ItemGroup>
    </Target>

    <!-- Reference to the game assemblies -->
    <!-- On local build, the assemblies are present in the game directory -->
    <ItemGroup Condition="$(CI) != 'true'">
        <!-- List of game assembly to include as reference -->
        <DllNames Include="Assembly-CSharp" Publicize="true" />
        <DllNames Include="Facepunch.Steamworks.Win64" />
        <DllNames Include="Newtonsoft.Json" />
        <DllNames Include="Unity.TextMeshPro" />
        <DllNames Include="UnityEngine.UI" />
        <DllNames Include="Unity.InputSystem" />
        <DllNames Include="Unity.InputSystem.ForUI" />
        <DllNames Include="Unity.Netcode.Components" />
        <DllNames Include="Unity.Netcode.Runtime" />
        <DllNames Include="Unity.Networking.Transport" />
        <DllNames Include="UnityEngine" />
        <DllNames Include="UnityEngine.AnimationModule" />
        <DllNames Include="UnityEngine.AssetBundleModule" />
        <DllNames Include="UnityEngine.AudioModule" />
        <DllNames Include="UnityEngine.CoreModule" />

        <Reference Include="@(DllNames)" HintPath="$(AssemblyGameDir)%(Identity).dll"/>
    </ItemGroup>

    <ItemGroup Condition="$(CI) != 'true'">
        <!-- List of BepInEx Core assembly to include as reference -->
        <DllNames Include="0Harmony" />
        <DllNames Include="BepInEx" />
        <DllNames Include="HarmonyXInterop" />
        <DllNames Include="Mono.Cecil" />
        <DllNames Include="Mono.Cecil.Mdb" />
        <DllNames Include="Mono.Cecil.Pdb" />
        <DllNames Include="Mono.Cecil.Rocks" />
        <DllNames Include="MonoMod.RuntimeDetour" />
        <DllNames Include="MonoMod.Utils" />

        <Reference Include="@(DllNames)" HintPath="$(BepInExCoreDir)%(Identity).dll"/>
    </ItemGroup>

    <ItemGroup>
      <Compile Update="Properties\Resources.Designer.cs">
        <DesignTime>True</DesignTime>
        <AutoGen>True</AutoGen>
        <DependentUpon>Resources.resx</DependentUpon>
      </Compile>
    </ItemGroup>

    <ItemGroup>
      <EmbeddedResource Update="Properties\Resources.resx">
        <Generator>ResXFileCodeGenerator</Generator>
        <LastGenOutput>Resources.Designer.cs</LastGenOutput>
      </EmbeddedResource>
    </ItemGroup>

    <!-- On CI build, the assemblies are downloaded from NuGet -->
    <ItemGroup Condition="$(CI) == 'true'">
        <PackageReference Include="LethalCompany.GameLibs.Steam" Version="$(GameVersion)" PrivateAssets="all" />
    </ItemGroup>

     <!-- Move the plugin to the game's plugin directory and start the game to test it -->
    <Target Condition="'$(CI)' != 'true' And $(StartGame)" Name="StartGame" AfterTargets="PostBuildEvent">
        <!-- Create a temporary copy of the plugin in the target directory -->
        <!-- This is a workaround because if we copy it directly to the game's plugin directory, an error is thrown because the game is using the plugin -->
        <Copy SourceFiles="$(TargetDir)$(TargetFileName)" DestinationFiles="$(TargetDir)$(TargetFileName).tmp"/>
        <!-- Move the plugin temporary copy to the game's plugin directory -->
        <!-- The move command will overwrite the plugin if it already exists and no error will be thrown -->
        <!-- We can't move the original plugin because it is used by reference for Test project -->
        <Move SourceFiles="$(TargetDir)$(TargetFileName).tmp" DestinationFiles="$(PluginGameDir)$(TargetFileName)"/>
        <!-- Kill every instance of the game, ignore errors if none are running -->
        <Exec Command='taskkill /F /IM "$(GameExe)" /T || exit 0'/>
        <!-- Start new instances of the game as many times as specified in NumberOfClients -->
        <!-- The ping command is used to apply a delay between each instance, otherwise only one BepInEx debug terminal would be opened -->
        <!-- Use ping command is a workaround because Windows doesn't have a sleep command -->
        <Exec Command='for /L %%i in (1,1,$(NumberOfClients)) do (start "" "$(GameExePath)" &amp; if %%i lss $(NumberOfClients) (ping 127.0.0.1 -n $(PingDelay) > nul))'/>
    </Target>

    <!-- Build the plugin for Thunderstore publication -->
    <!-- The command will create a zip file in the target directory using the thunderstore.toml file -->
    <Target Condition="'$(BuildThunderstorePackage)' == 'true'" Name="ThunderstoreBuild" AfterTargets="PostBuildEvent" DependsOnTargets="MinVer">
        <PropertyGroup>
            <PluginVersion>$(MinVerMajor).$(MinVerMinor).$(MinVerPatch)</PluginVersion>
        </PropertyGroup>
        <!-- https://github.com/thunderstore-io/thunderstore-cli/wiki -->
        <Exec Command="tcli build --config-path $(SolutionDir)thunderstore.toml --package-version $(PluginVersion)"/>
    </Target>
</Project>
